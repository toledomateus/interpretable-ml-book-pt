# LIME {#lime}

{{< include _setup.qmd >}}

```{r}
#' Kernel function
#'
#' @param d Distance between center and point
#' @param kernel_width Width of kernel
kernel = function(d, kernel_width){
  sqrt(exp(-(d^2) / kernel_width^2))
}

#' Get euclidean distances of samples to instances to be explained
#' @param point_explain Vector of scaled features
#' @param points_sample data.frame of scaled features for the sample points
#' @return Vector with distances of samples to instance to be explained
get_distances = function(point_explain, points_sample){
  # euclidean distance
  apply(points_sample, 1, function(x){
    sum((point_explain - x)^2)
  })
}

# Function for creating y values
get_y = function(x1, x2, noise_prob = 0){
  y = sign(sign(x2-1+abs(x1*2))/3 - sign(x2-.5+abs(x1*3))/3) + 1
  y = y * (1 - rbinom(length(x1), 1, prob = noise_prob))
  # flip classes
  y = 1 - y
  y
}


get.ycomments.classifier = function(ycomments){
  labeledTerms = prepare_data(ycomments$CONTENT)
  labeledTerms$class = factor(ycomments$CLASS, levels = c(0,1), labels = c('no spam', 'spam'))
  rp = rpart::rpart(class ~ ., data = labeledTerms)
  get_predict_fun(rp, labeledTerms)
}

prepare_data = function(comments, trained_corpus = NULL){

  corpus = Corpus(VectorSource(comments))
  dtm = DocumentTermMatrix(corpus, control = list(removePunctuation = TRUE,
                                                  stopwords=TRUE,
                                                  stemming = FALSE,
                                                  removeNumbers = TRUE
                                                  ))

  labeledTerms = as.data.frame(as.matrix(dtm))

  # Seems that columns called break or next cause trouble
  names(labeledTerms)[names(labeledTerms) %in% c('break')] <- 'break.'
  names(labeledTerms)[names(labeledTerms) %in% c('next')] <- 'next.'
  names(labeledTerms)[names(labeledTerms) %in% c('else')] <- 'else.'


  if(!is.null(trained_corpus)){
    # Make sure only overlapping features are used
    labeledTerms = labeledTerms[intersect(colnames(labeledTerms), colnames(trained_corpus))]

    empty_corpus = trained_corpus[1, ]
    labeledTerms = data.frame(data.table::rbindlist(list(empty_corpus, labeledTerms), fill=TRUE))
    labeledTerms = labeledTerms[2:nrow(labeledTerms),]
  }
  labeledTerms
}


get_predict_fun = function(model, train_corpus){
  function(comments){
    terms = prepare_data(comments, train_corpus)
    predict(model, newdata = terms, type='prob')
  }
}


# Text data is not yet implemented in LIME
# Doing it myself here


#' Tokenize sentence into words
#'
#' @param x string with sentence
#' @return list of words
tokenize = function(x){
  unlist(strsplit(x, "\\s+"))
}


#' Get a subset from a text
#'
#' @param words List of words
#' @param prob Probability with which to keep a word
#' @return List with two objects. First object is the new text. Second object is a vector
#' of length number of words with 0s and 1s, indicating whether a word is in the new
#' sentence (1) or not (0)
draw_combination =  function(words, prob=0.5){
  # Create combination
  combi = rbinom(n = length(words), size = 1, prob = prob)
  names(combi) = words
  df = data.frame(t(combi))
  # Create text
  new_text = paste(words[which(combi==1)], collapse  = ' ')
  list(text = new_text,
       combi = df)
}


#'Create variations of a text
#'
#'@param text The text
#'@param pred_fun The prediction function from the machine learning model.
#'      It should contain the complete pipeline:  take the raw text, do all the pre-processing
#'      and do the prediction. Returned prediction should be a data.frame with one column per class
#'@param prob Probability with which to keep a word
#'@param n_variations Number of variations to create
#'@param class The class for which to create the predictions
#'@return data.frame for a local linear model, containing binary features for word occurence
#'weights for distance to original sentence and the predictions for the chosen class.
create_variations = function(text, pred_fun, prob=0.5, n_variations = 100, class, round.to = 2){
  tokenized = tokenize(text)
  df = data.frame(lapply(tokenized, function(x) 1))
  names(df) = tokenized

  combinations = lapply(1:n_variations, function(x){
    draw_combination(tokenized, prob=prob)
  })

  texts = as.vector(sapply(combinations, function(x) x['text']))

  features = data.frame(data.table::rbindlist(sapply(combinations, function(x) x['combi'])))
  weights = round(rowSums(features) / ncol(features), round.to)
  predictions = round(pred_fun(texts)[,class], round.to)

  cbind(features, pred=predictions, weights = weights)
}


#' Explain the classification of a text
#'
#'@param text The text for which to explain the classification
#'@param pred_fun The prediction function from the machine learning model.
#'      It should contain the complete pipeline:  take the raw text, do all the pre-processing
#'      and do the prediction. Returned prediction should be a data.frame with one column per class
#'@param prob The probability to keep a word in the variations
#'@param n_variations The number of text variations to create
#'@param K The number of features to use for the explanation
#'@param case The ID of the observation
#'@param class The class for which to create the explanations
explain_text = function(text, pred_fun, prob=0.9, n_variations=500, K = 3, case=1, class){
  stopifnot(K >= 1)
  df = create_variations(text, pred_fun = pred_fun, prob = prob, n_variations = n_variations, class=class)
  mod = glm(pred ~ . - weights, data =df , weights=df$weights, family = 'binomial')
  coefs = coef(mod)
  coefs = coefs[names(coefs) != '(Intercept)']
  names(coefs) = tokenize(text)
  coefs = coefs[base::order(abs(coefs), decreasing = TRUE)]
  coefs = coefs[1:K]
  # Create explanation compatible to R-LIME format
  tibble(case = case,
         label = class,
         label_prob = pred_fun(text)[, class],
         model_intercept = coef(mod)['(Intercept)'],
         feature = names(coefs),
         feature_value = names(coefs),
         feature_weight = coefs,
         feature_desc = names(coefs),
         data = text,
         prediction = list(pred_fun(text)))
}


```


Local surrogate models are interpretable models that are used to explain individual predictions of black box machine learning models.
Local interpretable model-agnostic explanations (LIME), proposed by @ribeiro2016why, is an approach for fitting surrogate models.
Surrogate models are trained to approximate the predictions of the underlying black box model.

The idea is quite intuitive.
First, forget about the training data and imagine you only have the black box model where you can input data points and get the predictions of the model.
You can probe the box as often as you want.
Your goal is to understand why the machine learning model made a certain prediction.
LIME tests what happens to the predictions when you give variations of your data into the machine learning model.
LIME generates a new dataset consisting of perturbed samples and the corresponding predictions of the black box model.
On this new dataset, LIME then trains an interpretable model, which is weighted by the proximity of the sampled instances to the instance of interest.
The interpretable model can be anything from [Lasso](#lasso) to a [decision tree](#tree).
The learned model should be a good approximation of the machine learning model predictions locally, but it does not have to be a good global approximation.
This kind of accuracy is also called local fidelity.

Mathematically, local surrogate models with interpretability constraint can be expressed as follows:

$$\text{explanation}(\mathbf{x}) = \arg\min_{g \in G} L(\hat{f},g,\pi_{\mathbf{x}}) + \Omega(g)$$

The explanation model for instance $\mathbf{x}$ is the model $g$ (e.g., linear regression model) that minimizes loss $L$ (e.g., mean squared error), which measures how close the explanation is to the prediction of the original model $\hat{f}$ (e.g., an xgboost model), while the model complexity $\Omega(g)$ is kept low (e.g., prefer fewer features).
$G$ is the family of possible explanations, for example, all possible linear regression models.
The proximity measure $\pi_{\mathbf{x}}$ defines how large the neighborhood around instance $\mathbf{x}$ is that we consider for the explanation.
In practice, LIME only optimizes the loss part.
The user has to determine the complexity, e.g., by selecting the maximum number of features that the linear regression model may use.

The recipe for training local surrogate models:

- Select your instance of interest for which you want to have an explanation of its black box prediction.
- Perturb your dataset and get the black box predictions for these new points.
- Weight the new samples according to their proximity to the instance of interest.
- Train a weighted, interpretable model on the dataset with the variations.
- Explain the prediction by interpreting the local model.

In the current implementations in [R](https://github.com/thomasp85/lime) and [Python](https://github.com/marcotcr/lime), for example, linear regression can be chosen as an interpretable surrogate model.
In advance, you have to select $K$, the number of features you want to have in your interpretable model.
The lower $K$, the easier it is to interpret the model.
A higher $K$ potentially produces models with higher fidelity.
There are several methods for training models with exactly $K$ features.
A good choice is [Lasso](#lasso).
A Lasso model with a high regularization parameter $\lambda$ yields a model without any feature.
By retraining the Lasso models with slowly decreasing $\lambda$, one after the other, the features get weight estimates that differ from zero.
If there are $K$ features in the model, you have reached the desired number of features.
Other strategies are forward or backward selection of features.
This means you either start with the full model (= containing all features) or with a model with only the intercept and then test which feature would bring the biggest improvement when added or removed, until a model with $K$ features is reached.

How do you get the variations of the data?
This depends on the type of data, which can be either text, image, or tabular data.
For text and images, the solution is to turn single words or super-pixels on or off.
In the case of tabular data, LIME creates new samples by perturbing each feature individually, drawing from a normal distribution with mean and standard deviation taken from the feature.

## LIME for tabular data

Tabular data is data that comes in tables, with each row representing an instance and each column a feature.
LIME samples are not taken around the instance of interest, but from the training data's mass center, which is problematic.
But it increases the probability that the result for some of the sample points' predictions differs from the data point of interest, and that LIME can learn at least some explanation.
@fig-lime-fitting visually explains how sampling and local model training works:

```{r}
#| label: fig-lime-fitting
#| fig-cap: "LIME algorithm for tabular data. A) Prediction surface given features $x_1$ and $x_2$. Predicted classes: 1 (dark) or 0 (light). B) Instance of interest (big dot) and sampled data (small dots). C) Assign weights based on distance to instance. D) Signs (+/-) show the classifications of the locally learned model from the weighted samples. The white line marks the decision boundary (P(c=1) = 0.5)."
#| fig-asp: 1

# Define range of set
lower_x1 = -2
upper_x1 = 2
lower_x2 = -2
upper_x2 = 1

# Size of the training set for the black box classifier
n_training  = 20000
# Size for the grid to plot the decision boundaries
n_grid = 100
# Number of samples for LIME explanations
n_sample = 500


# Simulate y ~ x1 + x2
set.seed(1)
x1 = runif(n_training, min = lower_x1, max = upper_x1)
x2 = runif(n_training, min = lower_x2, max = upper_x2)
y = get_y(x1, x2)
# Add noise
y_noisy = get_y(x1, x2, noise_prob = 0.01)
lime_training_df = data.frame(x1=x1, x2=x2, y=as.factor(y), y_noisy=as.factor(y_noisy))

# For scaling later on
x_means = c(mean(x1), mean(x2))
x_sd = c(sd(x1), sd(x2))


# Learn model
rf = randomForest::randomForest(y_noisy ~ x1 + x2, data = lime_training_df, ntree=100)
lime_training_df$predicted = predict(rf, lime_training_df)


# The decision boundaries
grid_x1 = seq(from=lower_x1, to=upper_x1, length.out=n_grid)
grid_x2 = seq(from=lower_x2, to=upper_x2, length.out=n_grid)
grid_df = expand.grid(x1 = grid_x1, x2 = grid_x2)
grid_df$predicted = as.numeric(as.character(predict(rf, newdata = grid_df)))


# The observation to be explained
explain_x1 = 1
explain_x2 = -0.5
explain_y_model = predict(rf, newdata = data.frame(x1=explain_x1, x2=explain_x2))
df_explain = data.frame(x1=explain_x1, x2=explain_x2, y_predicted=explain_y_model)

point_explain = c(explain_x1, explain_x2)
point_explain_scaled = (point_explain - x_means) / x_sd

# Drawing the samples for the LIME explanations
x1_sample = rnorm(n_sample, x_means[1], x_sd[1])
x2_sample = rnorm(n_sample, x_means[2], x_sd[2])
df_sample = data.frame(x1 = x1_sample, x2 = x2_sample)
# Scale the samples
points_sample = apply(df_sample, 1, function(x){
  (x - x_means) / x_sd
}) %>% t



# Add weights to the samples
kernel_width = sqrt(dim(df_sample)[2]) * 0.15
distances = get_distances(point_explain_scaled, 
  points_sample = points_sample)

df_sample$weights = kernel(distances, kernel_width=kernel_width)

df_sample$predicted = predict(rf, newdata = df_sample)


# Trees
# mod = rpart(predicted ~ x1 + x2, data = df_sample,  weights = df_sample$weights)
# grid_df$explained = predict(mod, newdata = grid_df, type='prob')[,2]

# Logistic regression model
mod = glm(predicted ~ x1 + x2, data = df_sample,  weights = df_sample$weights, family='binomial')
grid_df$explained = predict(mod, newdata = grid_df, type='response')

# logistic decision boundary
coefs = coefficients(mod)
logistic_boundary_x1 = grid_x1
logistic_boundary_x2 = -  (1/coefs['x2']) * (coefs['(Intercept)'] + coefs['x1'] * grid_x1) 
logistic_boundary_df = data.frame(x1 = logistic_boundary_x1, x2 = logistic_boundary_x2)
logistic_boundary_df = filter(logistic_boundary_df, x2 <= upper_x2, x2 >= lower_x2)


# Create a smaller grid for visualization of local model boundaries
x1_steps = unique(grid_df$x1)[seq(from=1, to=n_grid, length.out = 20)]
x2_steps = unique(grid_df$x2)[seq(from=1, to=n_grid, length.out = 20)]
grid_df_small = grid_df[grid_df$x1 %in% x1_steps & grid_df$x2 %in% x2_steps,]
grid_df_small$explained_class = round(grid_df_small$explained)
library(latex2exp)
x1lab = xlab(TeX("$x_1$"))
x2lab = ylab(TeX("$x_2$"))

colors = c('#132B43', '#56B1F7')
# Data with some noise
p_data = ggplot(lime_training_df) +
  geom_point(aes(x=x1,y=x2,fill=y_noisy, color=y_noisy), alpha =0.3, shape=21) +
  scale_fill_manual(values = colors) +
  scale_color_manual(values = colors) +
  my_theme(legend.position = 'none')

# The decision boundaries of the learned black box classifier
p_boundaries = ggplot(grid_df) +
  geom_raster(aes(x=x1,y=x2,fill=predicted), alpha = 0.3, interpolate=TRUE) +
  my_theme(legend.position='none') +
  ggtitle('A') + x1lab + x2lab


# Drawing some samples
p_samples = p_boundaries +
  geom_point(data = df_sample, aes(x=x1, y=x2)) +
  scale_x_continuous(limits = c(-2, 2)) +
  scale_y_continuous(limits = c(-2, 1))
# The point to be explained
p_explain = p_samples +
  geom_point(data = df_explain, aes(x=x1,y=x2), fill = 'yellow', shape = 21, size=4) +
  ggtitle('B')

p_weighted = p_boundaries +
  geom_point(data = df_sample, aes(x=x1, y=x2, size=weights)) +
  scale_x_continuous(limits = c(-2, 2)) +
  scale_y_continuous(limits = c(-2, 1)) +
  geom_point(data = df_explain, aes(x=x1,y=x2), fill = 'yellow', shape = 21, size=4) +
  ggtitle('C')

p_boundaries_lime = ggplot(grid_df)  +
  geom_raster(aes(x=x1,y=x2,fill=predicted), alpha = 0.3, interpolate=TRUE) +
  geom_point(aes(x=x1, y=x2, color=explained), size = 2, data = grid_df_small[grid_df_small$explained_class==1,], shape=3) +
  geom_point(aes(x=x1, y=x2, color=explained), size = 2, data = grid_df_small[grid_df_small$explained_class==0,], shape=95) +
  geom_point(data = df_explain, aes(x=x1,y=x2), fill = 'yellow', shape = 21, size=4) +
  geom_line(aes(x=x1, y=x2), data =logistic_boundary_df, color = 'white') +
  my_theme(legend.position='none') + ggtitle('D') +
  x1lab + x2lab

(p_boundaries | p_explain) / (p_weighted | p_boundaries_lime)
```

As always, the devil is in the detail.
Defining a meaningful neighborhood around a point is difficult.
LIME currently uses an exponential smoothing kernel to define the neighborhood.
A smoothing kernel is a function that takes two data instances and returns a proximity measure.
The kernel width determines how large the neighborhood is:
A small kernel width means that an instance must be very close to influence the local model; a larger kernel width means that instances that are farther away also influence the model.
If you look at [LIME's Python implementation (file lime/lime_tabular.py)](https://github.com/marcotcr/lime/tree/ce2db6f20f47c3330beb107bb17fd25840ca4606), you will see that it uses an exponential smoothing kernel (on the normalized data), and the kernel width is 0.75 times the square root of the number of columns of the training data.
It looks like an innocent line of code, but it's the elephant sitting in your living room next to the good porcelain you got from your grandparents.
The big problem is that we don't have a good way to find the best kernel or width.
And where does the 0.75 even come from?
In certain scenarios, you can easily turn your explanation around by changing the kernel width, as shown in @fig-lime-fail:
The resulting linear regression model depends on the kernel width.
Should the "true" local feature effect be negative, positive, or no effect for $x = 1.6$?

```{r}
#| label: fig-lime-fail
#| fig-cap: Explanation of the prediction of instance x = 1.6 with different kernel widths. The model predictions are shown as a thick line and the distribution of the data is shown with rugs. Three local surrogate models with different kernel widths are computed.
#| out-width: 85%
set.seed(42)
df = data.frame(x = rnorm(200, mean = 0, sd = 3))
df$x[df$x < -5] = -5
df$y = (df$x + 2)^2
df$y[df$x > 1] = -df$x[df$x > 1] + 10 + - 0.05 * df$x[df$x > 1]^2
#df$y = df$y + rnorm(nrow(df), sd = 0.05)
explain.p = data.frame(x = 1.6, y = 8.5)

w1 = kernel(get_distances(data.frame(x = explain.p$x), df), 0.1)
w2 = kernel(get_distances(data.frame(x = explain.p$x), df), 0.75)
w3 = kernel(get_distances(data.frame(x = explain.p$x), df), 2)

lm.1 = lm(y ~ x, data = df, weights = w1)
lm.2 = lm(y ~ x, data = df, weights = w2)
lm.3 = lm(y ~ x, data = df, weights = w3)
df.all = rbind(df, df, df)

df.all$lime = c(predict(lm.1), predict(lm.2), predict(lm.3))
df.all$width = factor(c(rep(c(0.1, 0.75, 2), each = nrow(df))))


ggplot(df.all, aes(x = x, y = y)) + 
  geom_line(size = 2.5) + 
  geom_rug(sides = "b") + 
  geom_line(aes(x = x, y = lime, group = width, color = width, linetype = width)) + 
  geom_point(data = explain.p, aes(x = x, y = y), size = 12, shape = "x") + 
  scale_color_viridis("Kernel width", discrete = TRUE) + 
  scale_linetype("Kernel width") + 
  scale_y_continuous("Black Box prediction")

```

The example shows only one feature.
It gets worse in high-dimensional feature spaces.
It's also very unclear whether the distance measure should treat all features equally.
Is a distance unit for feature $X_1$ identical to one unit for feature $X_2$?
Distance measures are quite arbitrary and distances in different dimensions (aka features) might not be comparable at all.

```{r}
#| label: lime-prepare
n_features_lime = 2
```

Let's look at a concrete example.
We go back to the [penguins data](#bike-data), which is about classifying a penguin as female or male based on body measurements.
We analyze the random forest trained to do that.
The explanations are created with `r n_features_lime` features.
The results of the sparse local linear models trained for two instances with different predicted classes are shown in @fig-lime-tabular-example-explain-plot-1.
Here, higher body mass and longer bills are associated with lower P(female).

```{r}
#| label: fig-lime-tabular-example-explain-plot-1
#| fig-cap: LIME explanations for two instances of the penguin dataset. The x-axis shows the feature effect, which is the weight times the actual feature value.

instance_indices = c(1, 3)
pengu_features = penguins[names(penguins) != "sex"]
pred = Predictor$new(pengu_rf, data = pengu_features, type="prob", class="female")
lim1 = LocalModel$new(pred, x.interest = pengu_features[instance_indices[1],], k = n_features_lime)
lim2= LocalModel$new(pred, x.interest = pengu_features[instance_indices[2],], k = n_features_lime)

#wlim = c(min(c(lim1$results$effect, lim2$results$effect)), max(c(lim1$results$effect, lim2$results$effect)))
a = plot(lim1) +
#  scale_y_continuous(limit = wlim) + 
  geom_hline(aes(yintercept=0))   +
  theme(axis.title.y=element_blank(),
        axis.ticks.y=element_blank())
b = plot(lim2) +
#    scale_y_continuous(limit = wlim) + 
    geom_hline(aes(yintercept=0)) +
  theme(axis.title.y=element_blank(),
        axis.ticks.y=element_blank())

(a / b)
```


## LIME for text data

LIME for text differs from LIME for tabular data.
Variations of the data are generated differently:
Starting from the original text, new texts are created by randomly removing words from the original text.
The dataset is represented with binary features for each word.
A feature is 1 if the corresponding word is included and 0 if it has been removed.

As an example for text classification, we work with 1956 comments from 5 different YouTube videos.
Thankfully, the authors who used this dataset in an article on spam classification made the data [freely available](https://archive.ics.uci.edu/ml/datasets/YouTube+Spam+Collection) [@alberto2015tubespam].

The comments were collected via the YouTube API from five of the ten most viewed videos on YouTube in the first half of 2015.
All 5 are music videos.
One of them is "Gangnam Style" by Korean artist Psy.
The other artists are Katy Perry, LMFAO, Eminem, and Shakira.
Check out two comments in @tbl-show-data-TubeSpam, one spam (class=1), one legit (class=0).
The comments were manually labeled as spam or legitimate.
Spam was coded with a "1" and legitimate comments with a "0".
You can also go to YouTube and take a look at the comment section.
But please do not get caught in YouTube hell, and end up watching videos of monkeys stealing and drinking cocktails from tourists on the beach.
The Google Spam detector has also probably changed a lot since 2015.
[Watch the view-record-breaking video "Gangnam Style" here](https://www.youtube.com/watch?v=9bZkp7q19f0&feature=player_embedded).

The black box model is a deep decision tree trained on the document word matrix.
Each comment is one document (= one row), and each column is the number of occurrences of a given word.
Short decision trees are easy to understand, but in this case, the tree is very deep.
Also, in place of this tree, there could have been a recurrent neural network or a support vector machine trained on word embeddings (abstract vectors).

```{r}
#| label: tbl-show-data-TubeSpam
#| tbl-cap: Two examples of comments.
data("ycomments")
example_indices = c(267, 173)
texts = ycomments$CONTENT[example_indices]
kableExtra::kbl(ycomments[example_indices, c('CONTENT', 'CLASS')], booktabs = TRUE)
```

```{r}
#| label: lime-text-variations
library("tm")

labeledTerms = prepare_data(ycomments$CONTENT)
labeledTerms$class = factor(ycomments$CLASS, levels = c(0,1), labels = c('no spam', 'spam'))
labeledTerms2 = prepare_data(ycomments, trained_corpus = labeledTerms)

rp = rpart::rpart(class ~ ., data = labeledTerms)
predict_fun = get_predict_fun(rp, labeledTerms)
tokenized = tokenize(texts[2])
set.seed(2)
variations = create_variations(texts[2], predict_fun, prob=0.7, n_variations = 5, class='spam')
colnames(variations) = c(tokenized, 'prob', 'weight')
example_sentence = paste(colnames(variations)[variations[2, ] == 1], collapse = ' ')
```



The next step is to create some variations of the datasets used in a local model.
For example, some variations of one of the comments, see @tbl-lime-text-variations-output.
Each column corresponds to one word in the sentence.
Each row is a variation; 1 means that the word is part of this variation, and 0 means that the word has been removed.
The corresponding sentence for one of the variations is "`r example_sentence`".
The "prob" column shows the predicted probability of spam for each of the sentence variations.
The "weight" column shows the proximity of the variation to the original sentence, calculated as 1 minus the proportion of words that were removed, for example if 1 out of 7 words was removed, the proximity is 1 - 1/7 = 0.86.


```{r}
#| label: tbl-lime-text-variations-output
#| tbl-cap: Variations of one of the YouTube comments along with their weights (based on distance) and predicted probability of being spam.
kableExtra::kbl(variations, row.names = FALSE, booktabs = TRUE) %>% kable_styling(latex_options = c("scale_down"))
```

And finally @tbl-lime-text-explanations shows the two sentences (one spam, one no spam) with their estimated local weights found by the LIME algorithm:
The word "channel" indicates a high probability of spam.
For the non-spam comment, no non-zero weight was estimated, because no matter which word is removed, the predicted class remains the same.

```{r}
#| label: tbl-lime-text-explanations
#| tbl-cap: "LIME explanations for text classification."
set.seed(42)
ycomments.predict = get.ycomments.classifier(ycomments)
explanations  = data.table::rbindlist(lapply(seq_along(texts), function(i) {
  explain_text(texts[i], ycomments.predict, class='spam', case=i, prob = 0.5)
})
)
explanations = data.frame(explanations)
kableExtra::kbl(explanations[c("case", "label_prob", "feature", "feature_weight")], booktabs = TRUE)
```


## LIME for image data {#images-lime}

*This section was written by Verena Haunschmid.*

LIME for images works differently than LIME for tabular data and text.
Intuitively, it would not make much sense to perturb individual pixels, since many more than one pixel contribute to one class.
Randomly changing individual pixels would probably not change the predictions by much.
Therefore, variations of the images are created by segmenting the image into "superpixels" and turning superpixels off or on.
Superpixels are interconnected pixels with similar colors and can be turned off by replacing each pixel with a user-defined color, such as gray.
The user can also specify a probability for turning off a superpixel in each permutation.

In this example, we look at a classification made by the Inception V3 neural network.
The image used shows some bread I baked that is in a bowl (see @fig-lime-images-package-example-include).
Since we can have several predicted labels per image (sorted by probability), we can explain the top labels.
The top prediction is "Bagel" with a probability of $\mathbb{P}(Y = \text{Bagel}) = 0.77$, followed by "Strawberry" with a probability of $\mathbb{P}(Y = \text{Strawberry}) = 0.04$.
The following images show for "Bagel" and "Strawberry" the LIME explanations.
The explanations can be displayed directly on the image samples.
Green means that this part of the image increases the probability for the label, and red means a decrease.

![Left: Image of a bowl of bread. Middle and right: LIME explanations for the top 2 classes (Bagel, Strawberry) for image classification made by Google's Inception V3 neural network.](images/lime-images-package-example-1.jpg){#fig-lime-images-package-example-include}

The prediction and explanation for "Bagel" are very reasonable, even if the prediction is wrong -- these are clearly no bagels since the hole in the middle is missing.


## Strengths

Even if you **replace the underlying machine learning model**, you can still use the same local, interpretable model for explanation.
Suppose the people looking at the explanations understand decision trees best.
Because you use local surrogate models, you use decision trees as explanations without actually having to use a decision tree to make the predictions.
For example, you can use an SVM.
And if it turns out that an xgboost model works better, you can replace the SVM and still use a decision tree to explain the predictions.

Local surrogate models benefit from the literature and experience of training and interpreting interpretable models.

When using Lasso or short trees, the resulting **explanations are short (= selective) and possibly contrastive**.
Therefore, they make [human-friendly explanations](#explanation).

LIME is one of the few methods that **works for tabular data, text, and images**.

The **fidelity measure** (how well the interpretable model approximates the black box predictions) gives us a good idea of how reliable the interpretable model is in explaining the black box predictions in the neighborhood of the data instance of interest.

LIME is implemented in Python ([lime](https://github.com/marcotcr/lime) library) and R ([lime package](https://cran.r-project.org/web/packages/lime/index.html) and [iml package](https://cran.r-project.org/web/packages/iml/index.html)) and is **very easy to use**.

The explanations created with local surrogate models **can use other (interpretable) features than the original model was trained on**.
Of course, these interpretable features must be derived from the data instances.
A text classifier can rely on abstract word embeddings as features, but the explanation can be based on the presence or absence of words in a sentence.
A regression model can rely on a non-interpretable transformation of some attributes, but the explanations can be created with the original attributes.
For example, the regression model could be trained on components of a principal component analysis (PCA) of answers to a survey, but LIME might be trained on the original survey questions.
Using interpretable features for LIME can be a big advantage over other methods, especially when the model was trained with non-interpretable features.

## Limitations

The **choice of neighborhood is an unsolved problem** when using LIME with tabular data.
In my opinion, it's the biggest problem with LIME and the reason why I would recommend using LIME only with great care.
For each application, you have to try different kernel settings and see for yourself if the explanations make sense.
Unfortunately, this is the best advice I can give to find good kernel widths.

Sampling could be improved in the current implementation of LIME.
Data points are sampled from a Gaussian distribution, ignoring the correlation between features.
This **can lead to unlikely data points**, which can then be used to learn local explanation models.

The **complexity of the explanation model has to be defined in advance**.
This is just a small complaint because, in the end, the user always has to define the compromise between fidelity and sparsity.

Another really big problem is the **instability of the explanations**.
In an article [@melis2018robustness], the authors showed that the explanations of two very close points varied greatly in a simulated setting.
Also, in my experience, if you repeat the sampling process, then the explanations that come out can be different.
Instability means that it is difficult to trust the explanations, and you should be very critical.

LIME explanations can be manipulated by the data scientist to hide biases [@slack2020fooling].
The possibility of manipulation makes it more difficult to trust explanations generated with LIME.

Conclusion: Local surrogate models, with LIME as a concrete implementation, are very promising.
But the method is still in the development phase and many problems need to be solved before it can be safely applied.

## Software

The original Python implementation is in the [lime package](https://github.com/marcotcr/lime).
Other Python implementations can be found in [PiML](https://selfexplainml.github.io/PiML-Toolbox/_build/html/index.html), and [eli5](https://eli5.readthedocs.io/en/latest/blackbox/lime.html).
In R, you can use [iml](https://github.com/giuseppec/iml) or [DALEX](https://dalex.drwhy.ai/).
